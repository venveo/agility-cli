---
description: 
globs: 
alwaysApply: true
---
# Project Settings

This is a CLI project for interacting with Agility CMS via Management and Sync APIs / SDKs.

## Management SDK available in workspace
For types and functions reference see
`/Users/aaron/Documents/GitHub/agility-cms-management-sdk-typescript`

## Project Status

We are currently modernizing the codebase to use inquirer prompts to provide a better visual experience to developers. I have written extensive code on top of the existing layer of the CLI however we now need to ensure the old base commands found in `src/index.ts` can utilize the new file and folder structure of the updated prompt driven layer functionality. 

## Agiliy Files

This project writes instance files to the users local directory, wherever they are using the cli. It creates a folder structure as follows

`/agility-files/{guid}/{locale}/${isPreview ? 'preview':'live'}` and can contain multiple GUID folders.

## Previous Implementation

We want to update any previous implementations of the file paths, if we can utilize the functions in the new versions of the file, we shuld opt to migrate to that usage. 

## Conventions

- All code must be strongly typed.
- Do not allow `any` in TypeScript interfaces.
- Always search for existing type interfaces before creating new ones
- Do not re-write strongly typed interfaces without explicity asking first and waiting for a reply, this is generatly not a good idea anyways
- Always prefer `async generators` for long-running processes (like sync).
- Token storage must use `keytar`, not file-based systems.

## Architecture

**Initialization**: `src/index.ts` contains all of the CLI commands and vargs.
**Downaloders**: `src/lib/downloaders` These are responsible for downloading files from the source instances to the local file system using the pull operation, as well as when no source files are found. 
**Finders**: `src/lib/finders` Finders job is to check for data in the local mappings, or the target instance. 
**Getters**: `src/lib/getters` Getters retrieve the downloaded file contents for each of the content types.
**Mappers**: `src/lib/mappers` When content and pages are uploaded to the target instance, we need to map things like the models and containers to the payloads because the ID's on the target instance won't match whats in the source instance. 
**Pushers**:`src/lib/pushers` These are for pushing content into a target instance. 
**Prompts**:`src/lib/prompts` These are Inquirer prompts meant to act as part of the orechestration layer.
**Services**:`src/lib/services` These are the core services to handle different action sets within the CLI. These are largely inhereted from the first version of the CLI. 
**Utilities**:`src/lib/utlities` These are generators for local filesystem utilities such generating a .env file, sitemap, typescript interfaces and react components.



## Planning, Tracking and Execution 
- Plan, track and execution all phases, tasks and courses of action in `.cursor/manifest.md` before doing any work on the codebase. 
- Loop through these and update your completion as you go, if we get interupted using the prompt `resume generating` should begin where it last left off.



